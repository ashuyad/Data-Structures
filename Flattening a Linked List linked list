/* Node structure  used in the program
struct Node{
	int data;
	struct Node * next;
	struct Node * bottom ;
}; */

/*  Function which returns the  root of 
    the flattened linked list. */
Node* merge( Node* a, Node* b )
{
    // If first list is empty, the second list is result
    if (a == NULL)
        return b;
 
    // If second list is empty, the second list is result
    if (b == NULL)
        return a;
 
    // Compare the data members of head nodes of both lists
    // and put the smaller one in result
    Node* result;
    if (a->data < b->data)
    {
        result = a;
        result->bottom = merge( a->bottom, b );
    }
    else
    {
        result = b;
        result->bottom = merge( a, b->bottom );
    }
 
    return result;
}
 
// The main function that flattens a given linked list
Node* flatten (Node* root)
{
    // Base cases
    if (root == NULL || root->next == NULL)
        return root;
 
    // Merge this list with the list on right side
    return merge( root, flatten(root->next) );
}
